push 0
mv $sp $fp //Load new $fp
push $fp
li $a0 30

push $a0
push 0
mv $fp $al //put in $al actual fp
push $al
jal  Function0// jump to start of function and put in $ra next instruction

print $a0

halt
//Creating function:
//BEGIN FUNCTION Function0
Function0:
mv $sp $fp
push $ra
mv $fp $al //put in $al actual fp
//Value loading
lw $a0 2($al) //put in $a0 value of Id n
push $a0 // push e1
li $a0 1
lw $a2 0($sp) //take e2 and $a2 take e1
pop // remove e1 from the stack to preserve stack
le $a0 $a2 $a0 // $a0 = $a2 <= $a0

bc $a0 LABELthen1
b LABELendIf2
LABELthen1:
mv $fp $al //put in $al actual fp
//Value loading
lw $a0 2($al) //put in $a0 value of Id n

b endFunction0

LABELendIf2:

push $fp
mv $fp $al //put in $al actual fp
//Value loading
lw $a0 2($al) //put in $a0 value of Id n
push $a0 // push e1
li $a0 1
lw $a2 0($sp) //take e2 and $a2 take e1
pop // remove e1 from the stack to preserve stack
sub $a0 $a2 $a0 // a0 = t1-a0

push $a0
push 0
mv $fp $al //put in $al actual fp
lw $al 0($al) //go up to chain
push $al
jal  Function0// jump to start of function and put in $ra next instruction
push $a0 // push e1
push $fp
mv $fp $al //put in $al actual fp
//Value loading
lw $a0 2($al) //put in $a0 value of Id n
push $a0 // push e1
li $a0 2
lw $a2 0($sp) //take e2 and $a2 take e1
pop // remove e1 from the stack to preserve stack
sub $a0 $a2 $a0 // a0 = t1-a0

push $a0
push 0
mv $fp $al //put in $al actual fp
lw $al 0($al) //go up to chain
push $al
jal  Function0// jump to start of function and put in $ra next instruction
lw $a2 0($sp) //take e2 and $a2 take e1
pop // remove e1 from the stack to preserve stack
add $a0 $a2 $a0 // a0 = t1+a0

b endFunction0


endFunction0:
subi $sp $fp 1
lw $fp 0($fp)
lw $ra 0($sp)
addi $sp $sp 3//pop declaration 0
pop
lw $fp 0($sp)
pop
jr $ra
// END OF Fibonacci

//Ending function.
