li $a0 0
push $a0

li $a0 0
push $a0

li $a0 0
push $a0

push 0
mv $sp $fp //Load new $fp



push $fp
mv $fp $al //put in $al actual fp
addi $a0 $al 1 //put in $a0 value of Id a
push $a0
li $a0 1

push $a0
push 0
mv $fp $al //put in $al actual fp
push $al
jal  Function0// jump to start of function and put in $ra next instruction

push $fp
mv $fp $al //put in $al actual fp
addi $a0 $al 2 //put in $a0 value of Id b
push $a0
li $a0 2

push $a0
push 0
mv $fp $al //put in $al actual fp
push $al
jal  Function0// jump to start of function and put in $ra next instruction

push $fp
mv $fp $al //put in $al actual fp
addi $a0 $al 3 //put in $a0 value of Id c
push $a0
li $a0 3

push $a0
push 0
mv $fp $al //put in $al actual fp
push $al
jal  Function0// jump to start of function and put in $ra next instruction

halt
//Creating function:
//BEGIN FUNCTION Function0
Function0:
mv $sp $fp
push $ra
mv $fp $al //put in $al actual fp
//Value loading
lw $a0 2($al) //put in $a0 value of Id n

mv $fp $al
//Var loading
lw $al 3($al) //put in $a0 value of Id x
sw $a0 0($al) //put in $a0 value of Id x


endFunction0:
subi $sp $fp 1
lw $fp 0($fp)
lw $ra 0($sp)
addi $sp $sp 4//pop declaration 0
pop
lw $fp 0($sp)
pop
jr $ra
// END OF f

//Ending function.
