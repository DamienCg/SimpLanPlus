push 0
mv $sp $fp //Load new $fp
push $fp
li $a0 5

push $a0
li $a0 4

push $a0
push 0
mv $fp $al //put in $al actual fp
push $al
jal  Function0// jump to start of function and put in $ra next instruction

halt
//Creating function:
//BEGIN FUNCTION Function0
Function0:
mv $sp $fp
push $ra
mv $fp $al //put in $al actual fp
//Value loading
lw $a0 2($al) //put in $a0 value of Id m
push $a0 // push e1
mv $fp $al //put in $al actual fp
//Value loading
lw $a0 3($al) //put in $a0 value of Id n
lw $a2 0($sp) //take e2 and $a2 take e1
pop // remove e1 from the stack to preserve stack
gt $a0 $a2 $a0 // $a0 = $a2 > $a0

bc $a0 LABELthen1
li $a0 0
push $a0

push 0
push $fp //loading new block
mv $sp $fp //Load new $fp
li $a0 1

mv $fp $al
addi $al $al2
sw $a0 0($al) // 0($al) = $a0 x=exp

push $fp
mv $fp $al //put in $al actual fp
//Value loading
lw $al 0($al) //go up to chain
lw $a0 3($al) //put in $a0 value of Id n
push $a0 // push e1
li $a0 1
lw $a2 0($sp) //take e2 and $a2 take e1
pop // remove e1 from the stack to preserve stack
add $a0 $a2 $a0 // a0 = t1+a0

push $a0
mv $fp $al //put in $al actual fp
//Value loading
lw $al 0($al) //go up to chain
lw $a0 2($al) //put in $a0 value of Id m
push $a0 // push e1
li $a0 1
lw $a2 0($sp) //take e2 and $a2 take e1
pop // remove e1 from the stack to preserve stack
add $a0 $a2 $a0 // a0 = t1+a0

push $a0
push 0
mv $fp $al //put in $al actual fp
lw $al 0($al) //go up to chain
lw $al 0($al) //go up to chain
push $al
jal  Function0// jump to start of function and put in $ra next instruction

subi $sp $fp 1 //Restore stack pointer as before block creation in blockNode
lw $fp 0($fp) //Load old $fp pushed 
b LABELendIf2
LABELthen1:
push 0
push $fp //loading new block
mv $sp $fp //Load new $fp
mv $fp $al //put in $al actual fp
//Value loading
lw $al 0($al) //go up to chain
lw $a0 2($al) //put in $a0 value of Id m
push $a0 // push e1
mv $fp $al //put in $al actual fp
//Value loading
lw $al 0($al) //go up to chain
lw $a0 3($al) //put in $a0 value of Id n
lw $a2 0($sp) //take e2 and $a2 take e1
pop // remove e1 from the stack to preserve stack
add $a0 $a2 $a0 // a0 = t1+a0

print $a0

subi $sp $fp 1 //Restore stack pointer as before block creation in blockNode
lw $fp 0($fp) //Load old $fp pushed 

LABELendIf2:


endFunction0:
subi $sp $fp 1
lw $fp 0($fp)
lw $ra 0($sp)
addi $sp $sp 4//pop declaration 0
pop
lw $fp 0($sp)
pop
jr $ra
// END OF f

//Ending function.
