li $a0 0
push $a0

li $a0 0
push $a0

li $a0 0
push $a0

push 0
mv $sp $fp //Load new $fp


li $a0 1

mv $fp $al
addi $al $al3
sw $a0 0($al) // 0($al) = $a0 c=exp

mv $fp $al //put in $al actual fp
//Value loading
lw $a0 3($al) //put in $a0 value of Id c
push $a0 // push e1
li $a0 1
lw $a2 0($sp) //take e2 and $a2 take e1
pop // remove e1 from the stack to preserve stack
gt $a0 $a2 $a0 // $a0 = $a2 > $a0

bc $a0 LABELthen1
push 0
push $fp //loading new block
mv $sp $fp //Load new $fp
mv $fp $al //put in $al actual fp
//Value loading
lw $al 0($al) //go up to chain
lw $a0 2($al) //put in $a0 value of Id b

mv $fp $al
lw $al 0($al) 
addi $al $al1
sw $a0 0($al) // 0($al) = $a0 a=exp

subi $sp $fp 1 //Restore stack pointer as before block creation in blockNode
lw $fp 0($fp) //Load old $fp pushed 
b LABELendIf2
LABELthen1:
push 0
push $fp //loading new block
mv $sp $fp //Load new $fp
mv $fp $al //put in $al actual fp
//Value loading
lw $al 0($al) //go up to chain
lw $a0 3($al) //put in $a0 value of Id c

mv $fp $al
lw $al 0($al) 
addi $al $al2
sw $a0 0($al) // 0($al) = $a0 b=exp

subi $sp $fp 1 //Restore stack pointer as before block creation in blockNode
lw $fp 0($fp) //Load old $fp pushed 

LABELendIf2:

halt
